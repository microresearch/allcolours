
* NOTES

- modeL and modeH knobs seperate
- max 64 modes= 4PWM x 16SR

- we have pulse in->SR/pulse inCLK_>CLK/interrupt - or SR depends on mode - and 2x PULSE_OUTS (different taps)
- + PWM is set by modes

- pulses in and out are INVERTED! (so pulse in is normally pulled up to 1!)

* from SR summaries we have:

- length of SR
- type of feedback: new in, looped out, parity generator, xor or ors of these possibles, from other SR (could be interesting)
- how this type of feedback is selected
- how the SR is clocked: by clocked pulses which can be irregular, by some feedback across two SRs, by regular speed CV, by some combination of these

- out as short pulses or as toggle 0/1

but only 16 modes

* SR modes - low and high

- length of SR (16 bits, 32 bits, x bits), shrink and extend, howdo we get to length? -> pulses count length????, speed cv is length with pulses as speed
- leaky on/off (leaks on clock pulse so use with CV speed)
- speed/clocking of SR is from CV, or speed follows pulse in/clock
- toggle lock loop on clock/pulse in (speed CV only modes) - or always include it with AND or XOR?
- entry into SR from pulse ins, or as LFSR (random)
- entry into SR from speed CV (as threshold or as ADC?) - means we must use clock as speed cv
- xors back in, no xors back in - and which xors? select by clock pulse?
- sr as pulses or as bits 
- which bits form the PWM DAC out? wide spaced or close spaced (4 bits for DAC and 8 bits for PWM) - wide only

- recursion: clock in of SR is XOR or other logic with output but would get stuck - maybe feedback output from other SR as clock for other but not both

older version = recursions: SR is clocked by its own HIGH output or logic XOR/AND with clock in

SR speed from own DAC out

// HF SR: 32 stages max, LF: 16 or 24 max

SR in timed interrupt:
OR
SR in pulse/clock interrupt: DAC out bits/close out, pulse out bits:

--> can we divide into pulse_in modes/speed_in modes

*** clock/pulse=SPEED modes (input bit) - fewer of these

1- entry into SR from CV (as threshold for bit or as ADC?)
2- CV selects length of SR which will stay with us - bit in ORed with loop bit
3- CV threshold determines if input bit ORed last bit
4- CV threshold determines if input bit XORed last bit
???5- CV determines probability of inverting the cycling bit in - no ext. bit in - this is Turing Machine - cycle bit or invert bit
5- use CV as speed divider... where we don't use CV otherwise -> input bit ORed with loop bit 
6- or rungler: XOR out with input bit

*** cv/speed in modes - make use of pulses and input bit:

1- pulse toggles loopback to OR with new input bit/or just accept new input bit (CGS) -X

2- XOR - X

3- loopback ORed with input bit and pulses flip/leak bits INSIDE the SR (how we select these? with pulse and counter) -X

4- pulse(1) inverts the cycling bit in - this is Turing Machine - cycle bit or invert bit (no extra input bit) -X

5- parity for loopback XOR is determined by pulsed bits in (how long
do we keep these as selected and how do we select bits - in a queue
and selected with pulses) -X

6- wiard1: pulse selects new data or loop old back into SR -X

7- wiard2: pulse selects new data or inverted loop old back into SR -X

8- electronotes: bits of the first SR determine (via NAND) if we recycle 2nd SR, or add new bit from the first SR -X

[9- SR swopovers// feedbacks - somewhere above?]

9 -or select as pulse out one mode eg mode 1 with pulses??? // or // double all modes for pulse out = 128 modes? - depends on resolution
// or we could toggle pulse out here in this mode...

10- noise taps for noise out at different speeds...-> array of noise taps

see: eg. 	32-bit Galois LFSR with taps at 32, 30, 26, 25. Sequence length is 4294967295. 0 is a lock-up state.  -1 for our purposes

https://docs.rs/lfsr/0.2.0/lfsr/galois/index.html and test these...

*** cv/speed in modes/older

*combine both with speed as divider of clock/pulse in clock/pulse modes* -> where to do this in 16 modes?

what can always be selected: external bits are always ANDed in (pullup?) ???

1- get bit in from pulse in, xor with last SR bit and shift out /output(length?)
2- as above, bit leaks on pulse - cv only
3- no xor, no leaks - circulation toggles - no in - cv only
4- no xor, leaks - circulation toggles - no in - cv only
////5- as pulses or as bits out - general option for hf or lf sides
6- bits in from CV as ADC - pulse only
7- LFSR: taps for each to give noise but with bits in ANDed
8- length from cv - pulse only
9- recursion: clock in of SR is XOR or other logic with output but
10- leaks with pulses (how often?)
11- toggle circulation with pulse/or/CV cv->somehow / threshold

- we can leave changes from one mode to the other (eg. length from CV set in pulse mode stays with CV as speed modes)

*** other modes

- SR is clocked by its own HIGH output or logic XOR/AND with clock in
  -> doesn;t work - see above: maybe feedback output from other SR as
  clock for other but not both

- SR speed from own DAC out 

* pwm modes low and high

each low or high follows: CV, update DAC(speed by CV or speed from clock), clock

1- pwm follows speed cv

2- pwms follow clock pulse in for each - how we do this? speed CV as divider/multiplier 

pulses per x microseconds // in 1KHz loop?

3- pwm follows DAC from SR (not same on LF as DAC bits ?what this means?>) -> speed for DAC style updates is from speed cv
- ... or speed for DAC updates is from clock pulse in depending on other mode, thus speed is same speed as DAC/shiftreg speed!
-> these depend on SR mode

in 2 and 3 we could use speed CV as offset for PWM-> in pulse mode only

4- pwm is offset against the other (with each speed as plus/minus offset) - if both have this mode then left one is set by speed CV

// how often do we update this last one...

* modes tech

values in array of pointers to avoid any switch routines

* older version from all_colours.c

pulse ins can leak, switch bits, input bits, select xor bits, select lengths, xor pulse in/not clock with last bit of sr -> input for sr

pulse outs all at different taps (to ins also)

- always pulses out, DAC out and PWM out.

Shift registers -> pulses out, DAC out, PWM out/DAC style (for each low and high side):

?mode low/mode high? - *thus we need seperate mode knobs*!

- length of SR (16 bits, 32 bits, x bits), shrink and extend, howdo we get to length? -> pulses count length, speed cv is length with pulses as speed
- leaky on/off (leaks on clock pulse so use with CV speed)
- speed/clocking of SR is from CV, or speed follows pulse in/clock
- toggle lock loop on clock/pulse in (speed CV only modes) - or always include it with AND or XOR?
- entry into SR from pulse ins, or as LFSR (random)
- entry into SR from speed CV (as threshold or as ADC?) - means we must use clock as speed cv
- xors back in, no xors back in - and which xors? select by clock pulse?
- sr as pulses or as bits is ONLY a choice on HF side
- which bits form the usual DAC out and the PWM DAC out? wide spaced or close spaced (4 bits for DAC and 8 bits for PWM)
- wild card of SR speed from DAC style SR output?

// HF SR: 32 stages max, LF: 16 or 24 max

HF SR in timed interrupt:

HF SR in pulse/clock interrupt: DAC out bits/close out, pulse out bits

1- get bit in from pulse in, xor with last SR bit and shift out /output(length?)

2- as above, bit leaks?
3- as above, no xor, no leaks
4- no xor, leaks
5- as pulses or as bits out
6- bits in from CV

/////////////

recursions: 

SR is clocked by its own HIGH output or logic XOR/AND with clock in, SR usual feedback, SR speed from own DAC out


////PWM update in main loop speed???

PWMs low and high so more combinations:

each follows: CV, update DAC(speed by CV or speed from clock), clock

or can mix/combine/logical op one against the other

- pwms follow each speed cv
- pwml follows cv, other is DAC style from SR - and can combine each also say mix DAC and cv
- pwmh follows cv, other is DAC style from SR
- both pwmh and pwml follow DAC style
- speed for DAC style updates is from speed cv for each or speed for DAC updates is from pulse in for each -> speed is same speed as DAC/shiftreg speed!
- pwms follow each clock pulse in for each...


* older from notes.org

- CV in incoming bit or set of bits to shift and/or value for clock out, CV pulse in to lock/unlock, slew for clock out/cv in, extra as speed of shifting?

- pulse in to shift... purpose of shifting ...
- larger speed shifts for filter are important so maybe look at dividers and changing these with CV
- knob mode for leak etc

start to list modes

1-> various shift register implementations in pulse/bit and speed as
speed/skew CV/knob - OUT is pulse/bit and/or DAC out and OUT is 7490
clock/PWM OUT from shift reg taps ...

2-> various shift register implementations in as pulse/bit (from CV -
threshold) and speed as speed/skew CV/knob - OUT is pulse/bit and/or
DAC out and in CV controls 7490 clock/PWM OUT and is skewed by
speed/skew CV/knob

3-> various shift register implementations in pulse/bit and speed as
speed/skew CV/knob - OUT is pulse/bit and/or DAC out and in pulse
controls 7490 clock/PWM out

other modes?

we can xor and other ops CV and shift reg/pulse/DAC to 7490 CLOCK

