* PROBS - to define and maybe place in files as sep parts

*modeN: prob modes done, port electronotes and probability modes to R and C*

+question if routed includes cycle in its route? but only if we change table...+

*notation system and define/implement all prob modes: prob taken from [X] of [Y] bit [LOGIC_WITH] [Z]*

for ADC:

[LFSR, CV, DAC, SR] against DAC, LRC: ADC_buffer[12], CV, and combinations (ADD, XOR etc) of these - see EN below]

otherDAC, ownDAC

prob/STROBE - invert ADC BIT - XOR/OR routed
       - +invert [ADC/xor/or/routed] - NONE+ as above
       - ADC BIT vs routed - NONE
       - ADC BIT vs [ADC/xor/or/routed] - NONE

[
       - ADC BIT vs invert [routed] - NONE
       - ADC BIT vs invert[ADC/xor/or/routed] - NONE
]

for abstract ADCs we can also have RETURNbit
       - ADC bits vs RETURNbit - XOR/OR routed
       - ADC bits vs [routed/xor/or/RETURNbit]
       - ADCBIT xor routed vs returnbit

*prob/STROBE for CLN: invert routed*
                *routed vs cycling*
		*routed vs [routed^cycling]*



////// bits/options for probabilities:

1ADCBIT, 2ROUTED, 3RETURN, 4NADA and inversion of first three: x bits XOR/OR/LOGOP x bits

X vs Y: options

1 vs 2, 3, 4, 2^1, 3^1, 3^2, 1^2^3 // and can be XOR or OR // and inv of each above
2 vs 3, 4, 2^1, 3^1, 3^2, 1^2^3 // 
3 vs 4, 2^1, 3^1, 3^2, 1^2^3 // 
= 18 options/leaving out inv/xor/or options
//// and combinations of below?
CVmodes:
strobe
toggle

define as:
left side: LFSR, SRown,  
right side: CV, CV+DAC

INTmodes:
LFSR<CV
LFSR<DAC
LFSR<DAC+CV
wildcard: LFSR<ADC_buffer[12]

SRown<CV - own ghost SR: gate[w].Gshift_[w] 
SRown<CV_DAC

Electronotes versions of... use SR, LFSR and CV

///
for L, R

1ROUTED, 2RETURN, 3PULSBIT, 4NADA - as above

- invert RETURNbit - XOR/OR routed/puls
- RETURNbit vs routed/puls - NONE
- invertRETURNbit vs routed/puls - NONE
- routed versus 0 - RETURNbit

return/routed/pulse/nada

and what about PULSIN - as part of routed or pull into outside XOR

comparators for probability and ADC depending on INT/CV mode

/for prob:
1. if LFSR/SR/DAC[x]<CV  // int mode - which SR?
2.if LFSR/SR<DAC[x]  // cv/int mode
3.if LFSR/SR<DAC[x]+CV // int mode

or prob is sourced from LFSR bits ORed with CV/DAC: in Electronotes when all 8 inputs are high - DONE in modeN.h

EN: cycling - prob of entry of new bits - route inXORpulsesADC  /no cycle

* what we already have in each

** newmodes/older

00 1-TM invert cycling bit - OR with BITIN (OR (routed^pulse)) // OR (routedORpulse) ??
01 2-BITIN or cycling
10 3-INV of above
11 4- BITIN or not into cycling


[ported to LN13,14,15]
13: 00TM lfsr<dac
14: 01 binroute or loopback
15: binrouteandcycle or loopback

not cases:
17: 00TM loop/invertloop XORroutein
18: 11Enotes: toggle binrouteandcycle/cycle [but enotes is binroute/cycle]

17-19cases:
17: LFSR<CV_DAC: invert cycling, no route in, pulse ORed in TM
18: LFSR<DAC: as above
19: LFSR<CV: as above

was11: toggle binroute or inv cycling bit
was10: toggle binroute or cycling bit
was 9: toggleinv or not cycling
was 8: as above no toggle
was 7: toggle routed or not into cycling 
was 6: lfsr<param - binrouteandcycle/cycle

cases54-61: intmodes
54: ownSR<CV - cycle or route // OR pulsin
55: ownSR<routedinSR - as above


** modeN

CV:
some probs are in adc_:
9: trigger xbits in or cycle out
33: lfsr<otherpar as above 
65: lfsr>otherpar inv or not cycling bit TM

INT:
invert ADC BIT - XOR/OR routed 3
       - ADC BIT vs routed - NONE 2
       - ADC BIT vs [ADC/xor/or/routed] - NONE 1

4 only for abstract modes

prob184: mode84 and adc/binroute vs. justcycle
prob1: lfsr<cv: adc vs adc/binroute
2:            : adc vs binroute
3:            : adc/bin vs invadc/bin
4:            : adc/bin vs justcycle

*now we have these with free CV selecting ADC type*

5 is electronotes draft with CV/lFSR - adc/binroute vs justcycle 
6                                    - adc vs justcycle
7                                    - adc vs binroute

probdac1 - as prob1 above but dac<cv

** modeL

LNprob: bits for probs
LNwas15: 4x4 probs of routing in - both can also use CV
LintDACroute: prob LFSR<CV if we change route


Lintprobfixed0: probability mode where CV fixes bits (of prob) and prob is against DAC/SR onlys ???????what means* - ?prob is our LFSR - so we fix bits of this one...
//inv cycling bit
1: cycle vs routein

** modeC

none

** modeR

none

* sketches

* bits

*each shiftregister: // bits can come from sr/dac/cv and mix of these/mask of these - how to render this more generic?*

adding new modes into model

our length: 5 bits [speed? 7 bits]
bits come from: adctype: 3 bits
               route from: 4 bits
what we do: 3 bits
logic for each

generic prob is between 2 bits and 7 bits and uses x bits for the decision x2 each side...
*Lintgenericprobx uses 7 bits for probability x against y of z* and this just uses binroute

*dactype: 3 bits*

*where we get our dacfrom: 2 bits [recursion eg. dac[dacfrom] selects dacfrom* - but is not an extra 2 bits as we switch dacs...

maybe divide and see to what we can add local dacfrom bits...
dacfrom[dacfrom[dacfrom]]]??? how we handles this as first dacfrom is
always from a fixed one??

- route and logop - 8 bits + 2 from other dac: LSRroutelogxx and LSRroutelogxxx

- route and what we do
0-looping only/aka return only!
1-pass on only - straight through
2-pass on and return bitx

- route and prob/just prob with basic route

- length and dactype - basic route
 
////

governing bits from: CV, CV+DAC/whichDAC, whichDAC // if we have CV access? - whichDAC is 2 bits

bits for: length(5), speed total(7bits from 10 bits) 12 bits

speedfromdac - which dac bits we have

route and logop: LLcv/srroute 8 cv bits for routein and logop 

probability: Lintgenericprobx - how to combine with route? = 7 bits and 4 bits - combined in xxx

////////////////////////

TODO: use SR/GSR as bits - other important bits: basic ADC type, multiple DAC out/no DAC, SR-logic_table, routing (includes type of SR)

	// next set of generic bit options - this time for probabilities
	/*
	  00 1-TM invert cycling bit - OR with BITIN (OR *(routed^pulse)*) // OR (routedORpulse) ??
	  01 2-BITIN or loopback
	  10 3-INV of above
	  11 4- BITIN or not into cycling
	  
	  - so is 2 bits for type of prob
	  - BITN is routed / routed XOR puls so is 1 bit
	  - where we get prob is 2 bits let's say = 5 bits = 32
	*/

/* // what bits we have again?///////////////////////////////////////////

dactype=4x4 bits = 16 bits (reduce to 3 bits each = 12 bits)

route=4 bits, what we do=2 bits, logops=2 bits, probability=2bits

eg.what we do
0-looping only/aka return only!
1-pass on only - straight through
2-pass on and return bitx

5 bits: 1 1 1 1 1 1
- top bit/speed
- 4 bits routing in
- 1 bit prob of inversion

incoming bit bits summary (3 bits) - eg. prob of: + type of prob (2 bits)
- routed in 
- cycled 
- inversion of routed
- inv cycles
- cycle and route
- inv of cycle and route
[can be more options eg. adc in]

route in and logop bits:
1111 4 route in bits x 3 logops = 2 bits per... 0, none, 1, xor, 2or, 3leak = 8 bits = 255 too much for CV
 
00 1-TM invert cycling bit - OR with BITIN (OR *(routed^pulse)*) // OR (routedORpulse) ??
01 2-BITIN or loopback
10 3-INV of above
11 4- BITIN or not into cycling

** newmodes

- check later binary routing table modes 24-26 routes 56-61

25: cv as routing table
26: sr as routing table

56: 2 bits for single routes in, 2 bits for probableCV function, 2 bits for logopx, 2 bits for type of DAC = 8 bits from dac/sr
57: as 56 but for CV

58: tests for generic prob mode????

** L, R, C, N what we have?

*** N

*NLSRlengthsel0(void){ //use other SR bits to determine length of SR*

DACroute - route from dac 
SRroute - from SR
introute

*** L

*Lintgenericprobx uses 7 bits for probability x against y of z*

*LNprob has bits for probableCV function*

*LNwas15 4x4 bits prob of routing in GSR  so we need 4 probs of x bits?*

DACroute - route from dac 
SRroute - from SR

*LLcv/srroute 8 cv bits for routein and logop - do we have straight sr/dac version - yes now we have - port to others*
LBITMIX - cv/dac mix of above
Lintroute - cv bits for routein and logop
Lintdacroute - cv prob of changed table sans logop



*** C

DACroute - route from dac 
SRroute - from SR
introute

*** R

DACroute - route from dac 
SRroute - from SR
introute
