//  case 0: // ADC x bits out but only 12/8/4/2/1 bits or could be 12 6 3 1
//    x=(shift_[reg]>>newr[length])<<news[length];
// 8= 12,10,8,6, 4,2,1,1


// how to calculate these?
static uint32_t space[20][12]={
  {0,2,3,4, 5,6,7,8, 9,10,11,13}, // bits which we select for length 12 (=13)

};

static uint32_t prub[8]={0,3,7,15, 31,63,127,255};

static uint32_t spaceshift[20][12]={ // and how these get shifted

};
  

static uint32_t padding[20]={0,
			     0b1,
			     0b11,
			     0b111,
			     0b1111,
			     0b11111,
			     0b111111,
			     0b111111,
			     0b1111111,
			     0b11111111,
			     0b111111111,
			     0b1111111111,
			     0b11111111111,
			     0b111111111111,
			     0b1111111111111,
			     0b11111111111111,
			     0b111111111111111,
			     0b1111111111111111,
			     0b11111111111111111,
			     0b111111111111111111,
};
			     


//static uint32_t lookuplenall[32]={31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0}; 
static uint32_t lookuplenall[32]={31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 3, 3, 3}; // inverted

static uint32_t lookuplenalln[32]={3, 3, 3, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31}; // noninverted

static uint32_t bitsz[256]={0, 1, 1, 2, 1, 2, 2, 3, 1, 2, 2, 3, 2, 3, 3, 4, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8}; // this is for 8 bits

// for DACs
static uint32_t rightshift[32]={0,0,0,0, 0,0,0,0, 0,0,0,0, // first 12 bits
				1,2,3,4, 5,6,7,8, 9,10,11,12, 13,14,15,16, 17,18,19,20};
 
static uint32_t leftshift[32]= {12,11,10,9, 8,7,6,5, 4,3,2,1, 0,0,0,0, 0,0,0,0, 0,0,0,0, 0,0,0,0, 0,0,0,0};// fixed 28/12 // fixed 16/8 // added extra <<1 19/12/2022 TO TEST
static uint32_t leftshiftalt[32]= {11,10,9,8, 7,6,5,4, 3,2,1,0, 0,0,0,0, 0,0,0,0, 0,0,0,0, 0,0,0,0, 0,0,0,0};// alt original

// fixed masks 31/8/2021

static uint32_t invmasky[32]={//0,0,0, // skip all zeroes or all ones ??? skip all ones
  //0b11111111111111111111111111111111,
0b11111111111111111111111111111110,
0b11111111111111111111111111111100,
0b11111111111111111111111111111000,
0b11111111111111111111111111110000,
0b11111111111111111111111111100000,
0b11111111111111111111111111000000,
0b11111111111111111111111110000000,
0b11111111111111111111111100000000,
0b11111111111111111111111000000000,
0b11111111111111111111110000000000,
0b11111111111111111111100000000000,
0b11111111111111111111000000000000,
0b11111111111111111110000000000000,
0b11111111111111111100000000000000,
0b11111111111111111000000000000000,
0b11111111111111110000000000000000,
0b11111111111111100000000000000000,
0b11111111111111000000000000000000,
0b11111111111110000000000000000000,
0b11111111111100000000000000000000,
0b11111111111000000000000000000000,
0b11111111110000000000000000000000,
0b11111111100000000000000000000000,
0b11111111000000000000000000000000,
0b11111110000000000000000000000000,
0b11111100000000000000000000000000,
0b11111000000000000000000000000000,
0b11110000000000000000000000000000,
0b11100000000000000000000000000000,
0b11000000000000000000000000000000,
0b10000000000000000000000000000000,
0b00000000000000000000000000000000
};

static uint32_t movemasky[32]={//0,0,0, // skip all zeroes or all ones ??? skip all ones
0b11111111111111111111111111110000,
0b11111111111111111111111111110000,
0b11111111111111111111111111110000,
0b11111111111111111111111111110000,
0b11111111111111111111111111100001,
0b11111111111111111111111111000011,
0b11111111111111111111111110000111,
0b11111111111111111111111100001111,
0b11111111111111111111111000011111,
0b11111111111111111111110000111111,
0b11111111111111111111100001111111,
0b11111111111111111111000011111111,
0b11111111111111111110000111111111,
0b11111111111111111100001111111111,
0b11111111111111111000011111111111,
0b11111111111111110000111111111111,
0b11111111111111100001111111111111,
0b11111111111111000011111111111111,
0b11111111111110000111111111111111,
0b11111111111100001111111111111111,
0b11111111111000011111111111111111,
0b11111111110000111111111111111111,
0b11111111100001111111111111111111,
0b11111111000011111111111111111111,
0b11111110000111111111111111111111,
0b11111100001111111111111111111111,
0b11111000011111111111111111111111,
0b11110000111111111111111111111111,
0b11100001111111111111111111111111,
0b11000011111111111111111111111111,
0b10000111111111111111111111111111,
0b00001111111111111111111111111111,
};

static uint32_t bitmasky[32]={
0b11111111111111111111111111111110,
0b11111111111111111111111111111101,
0b11111111111111111111111111111011,
0b11111111111111111111111111110111,
0b11111111111111111111111111101111,
0b11111111111111111111111111011111,
0b11111111111111111111111110111111,
0b11111111111111111111111101111111,
0b11111111111111111111111011111111,
0b11111111111111111111110111111111,
0b11111111111111111111101111111111,
0b11111111111111111111011111111111,
0b11111111111111111110111111111111,
0b11111111111111111101111111111111,
0b11111111111111111011111111111111,
0b11111111111111110111111111111111,
0b11111111111111101111111111111111,
0b11111111111111011111111111111111,
0b11111111111110111111111111111111,
0b11111111111101111111111111111111,
0b11111111111011111111111111111111,
0b11111111110111111111111111111111,
0b11111111101111111111111111111111,
0b11111111011111111111111111111111,
0b11111110111111111111111111111111,
0b11111101111111111111111111111111,
0b11111011111111111111111111111111,
0b11110111111111111111111111111111,
0b11101111111111111111111111111111,
0b11011111111111111111111111111111,
0b10111111111111111111111111111111,
0b01111111111111111111111111111111,
};

static uint32_t invbitmasky[32]={
0b00000000000000000000000000000001,
0b00000000000000000000000000000010,
0b00000000000000000000000000000100,
0b00000000000000000000000000001000,
0b00000000000000000000000000010000,
0b00000000000000000000000000100000,
0b00000000000000000000000001000000,
0b00000000000000000000000010000000,
0b00000000000000000000000100000000,
0b00000000000000000000001000000000,
0b00000000000000000000010000000000,
0b00000000000000000000100000000000,
0b00000000000000000001000000000000,
0b00000000000000000010000000000000,
0b00000000000000000100000000000000,
0b00000000000000001000000000000000,
0b00000000000000010000000000000000,
0b00000000000000100000000000000000,
0b00000000000001000000000000000000,
0b00000000000010000000000000000000,
0b00000000000100000000000000000000,
0b00000000001000000000000000000000,
0b00000000010000000000000000000000,
0b00000000100000000000000000000000,
0b00000001000000000000000000000000,
0b00000010000000000000000000000000,
0b00000100000000000000000000000000,
0b00001000000000000000000000000000,
0b00010000000000000000000000000000,
0b00100000000000000000000000000000,
0b01000000000000000000000000000000,
0b10000000000000000000000000000000,
};

static uint32_t masky[32]={//0,0,0, // skip all zeroes or all ones ??? all 0
  0b00000000000000000000000000000001,			  
  0b00000000000000000000000000000011,			  
  0b00000000000000000000000000000111,			  
  0b00000000000000000000000000001111,			  
			   0b00000000000000000000000000011111,			  
			   0b00000000000000000000000000111111,			  
			   0b00000000000000000000000001111111,			  
			   0b00000000000000000000000011111111,			  
			   0b00000000000000000000000111111111,			  
			   0b00000000000000000000001111111111,			  
			   0b00000000000000000000011111111111,			  
			   0b00000000000000000000111111111111,			  
			   0b00000000000000000001111111111111,			  
			   0b00000000000000000011111111111111,			  
			   0b00000000000000000111111111111111,			  
			   0b00000000000000001111111111111111,			  
			   0b00000000000000011111111111111111,			  
			   0b00000000000000111111111111111111,			  
			   0b00000000000001111111111111111111,			  
			   0b00000000000011111111111111111111,			  
			   0b00000000000111111111111111111111,			  
			   0b00000000001111111111111111111111,			  
			   0b00000000011111111111111111111111,			  
			   0b00000000111111111111111111111111,			  
			   0b00000001111111111111111111111111,			  
			   0b00000011111111111111111111111111,			  
			   0b00000111111111111111111111111111,			  
			   0b00001111111111111111111111111111,			  
			   0b00011111111111111111111111111111,			  
			   0b00111111111111111111111111111111,			  
			   0b01111111111111111111111111111111,			   
			   0b11111111111111111111111111111111,
};

static uint32_t othermasky[32]={  // skip all zeroes or all ones ???
  //  0b00000000000000000000000000000000,
  0b10000000000000000000000000000000,
  0b11000000000000000000000000000000,
  0b11100000000000000000000000000000,
  0b11110000000000000000000000000000,
  0b11111000000000000000000000000000,
  0b11111100000000000000000000000000,
  0b11111110000000000000000000000000,
  0b11111111000000000000000000000000,
  0b11111111100000000000000000000000,
  0b11111111110000000000000000000000,
  0b11111111111000000000000000000000,
  0b11111111111100000000000000000000,
  0b11111111111110000000000000000000,
  0b11111111111111000000000000000000,
  0b11111111111111100000000000000000,
  0b11111111111111110000000000000000,
  0b11111111111111111000000000000000,
  0b11111111111111111100000000000000,
  0b11111111111111111110000000000000,
  0b11111111111111111111000000000000,
  0b11111111111111111111100000000000,
  0b11111111111111111111110000000000,
  0b11111111111111111111111000000000,
  0b11111111111111111111111100000000,
  0b11111111111111111111111110000000,
  0b11111111111111111111111111000000,
  0b11111111111111111111111111100000,
  0b11111111111111111111111111110000,
  0b11111111111111111111111111111000,
  0b11111111111111111111111111111100,  
  0b11111111111111111111111111111110,
  0b11111111111111111111111111111111,
};



// array for taps
// eg. 32-bit Galois LFSR with taps at 32, 30, 26, 25. Sequence length is 4294967295. 0 is a lock-up state.  -- minus one here - 31, 29, 25, 24
// bith= ((shift_registerh >> 31) ^ (shift_registerh >> 29) ^ (shift_registerh >> 25) ^ (shift_registerh >> 24)) & 1u; // 32 is 31, 29, 25, 24
// from: http://courses.cse.tamu.edu/walker/csce680/lfsr_table.pdf
// and reworked for length in test.c -> not so if we revert to basic code...
// note that we can have 2 mirrored with [n, A, B, C] -> [n, n-C, n-B, n-A] - maybe for LF to hF!

static uint32_t lfsr_taps[32][4] = {
        {0, 0, 0, 0},
        {0, 0, 0, 0},
        {0, 0, 0, 0},
        {3, 2, 0, 0},
        {4, 3, 2, 1},
        {5, 4, 2, 1},
        {6, 5, 4, 3},
        {7, 5, 4, 3},
        {8, 7, 5, 4},
        {9, 8, 6, 5},
        {10, 9, 8, 6},
        {11, 10, 7, 5},
        {12, 11, 9, 8},
        {13, 12, 10, 8},
        {14, 13, 12, 10},
        {15, 13, 12, 10},
        {16, 15, 14, 13},
        {17, 16, 15, 12},
        {18, 17, 16, 13},
        {19, 18, 15, 13},
        {20, 19, 18, 15},
        {21, 18, 17, 16},
        {22, 21, 19, 17},
        {23, 22, 20, 19},
        {24, 23, 22, 21},
        {25, 24, 23, 19},
        {26, 25, 24, 21},
        {27, 26, 23, 21},
        {28, 27, 26, 24},
        {29, 28, 25, 23},
        {30, 29, 28, 27},
        {31, 19, 25, 24},
  };

static uint32_t ghost_tapsL[32][4] = { // left hand path
        {0, 0, 0, 0},
        {0, 0, 0, 0},
        {0, 0, 0, 0},
        {3, 2, 0, 0},
        {4, 3, 2, 1},
        {5, 4, 2, 1},
        {6, 5, 4, 3},
        {7, 5, 4, 3},
        {8, 7, 5, 4},
        {9, 8, 6, 5},
        {10, 9, 8, 6},
        {11, 10, 7, 5},
        {12, 11, 9, 8},
        {13, 12, 10, 8},
        {14, 13, 12, 10},
        {15, 13, 12, 10},
        {16, 15, 14, 13},
        {17, 16, 15, 12},
        {18, 17, 16, 13},
        {19, 18, 15, 13},
        {20, 19, 18, 15},
        {21, 18, 17, 16},
        {22, 21, 19, 17},
        {23, 22, 20, 19},
        {24, 23, 22, 21},
        {25, 24, 23, 19},
        {26, 25, 24, 21},
        {27, 26, 23, 21},
        {28, 27, 26, 24},
        {29, 28, 25, 23},
        {30, 29, 28, 27},
        {31, 29, 25, 24},
  };


static uint32_t lfsr_taps_mirrored[32][4] = {
        {0, 0, 0, 0},
        {0, 0, 0, 0},
        {0, 1, 1, 1},
        {3, 2, 2, 0},
        {4, 2, 1, 0},
        {5, 3, 2, 0},
        {6, 2, 1, 0},
        {7, 3, 2, 1},
        {8, 3, 2, 0},
        {9, 3, 2, 0},
        {10, 3, 1, 0},
        {11, 5, 3, 0},
        {12, 3, 2, 0},
        {13, 4, 2, 0},
        {14, 3, 1, 0},
        {15, 4, 2, 1},
        {16, 2, 1, 0},
        {17, 4, 1, 0},
        {18, 4, 1, 0},
        {19, 5, 3, 0},
        {20, 4, 1, 0},
        {21, 4, 3, 2},
        {22, 4, 2, 0},
        {23, 3, 2, 0},
        {24, 2, 1, 0},
        {25, 5, 1, 0},
        {26, 4, 1, 0},
        {27, 5, 3, 0},
        {28, 3, 1, 0},
        {29, 5, 3, 0},
        {30, 2, 1, 0},
        {31, 6, 5, 1},
	 };

static uint32_t ghost_tapsR[32][4] = { // right hands path
        {0, 0, 0, 0},
        {0, 0, 0, 0},
        {0, 1, 1, 1},
        {3, 2, 2, 0},
        {4, 2, 1, 0},
        {5, 3, 2, 0},
        {6, 2, 1, 0},
        {7, 3, 2, 1},
        {8, 3, 2, 0},
        {9, 3, 2, 0},
        {10, 3, 1, 0},
        {11, 5, 3, 0},
        {12, 3, 2, 0},
        {13, 4, 2, 0},
        {14, 3, 1, 0},
        {15, 4, 2, 1},
        {16, 2, 1, 0},
        {17, 4, 1, 0},
        {18, 4, 1, 0},
        {19, 5, 3, 0},
        {20, 4, 1, 0},
        {21, 4, 3, 2},
        {22, 4, 2, 0},
        {23, 3, 2, 0},
        {24, 2, 1, 0},
        {25, 5, 1, 0},
        {26, 4, 1, 0},
        {27, 5, 3, 0},
        {28, 3, 1, 0},
        {29, 5, 3, 0},
        {30, 2, 1, 0},
        {31, 6, 5, 1},
	 };

//uint16_t divy[32]={4095, 2047, 1365, 1023, 819, 682, 585, 511, 455, 409, 372, 341, 315, 292, 273, 255, 240, 227, 215, 204, 195, 186, 178, 170, 163, 157, 151, 146, 141, 136, 132, 127}; // should this be more weighted...

uint32_t divy[32]={2047, 2047, 1365, 1023, 819, 682, 585, 511, 455, 409, 372, 341, 315, 292, 273, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255}; // should this be more weighted...

uint32_t logtable[4]={0,0,0,0};

// array of spacers for DAC code
static uint32_t shifty_spacers[8]={1,2,3,4,5,6,7,8};

// fix this array as seems off...//FIXED 5/10 using code in test.c based on gaps
static uint32_t pos[32][8]={ // for DAC PWM out wider spacings
{0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0},
{0,1,1,1,1,1,1,1},
{0,1,2,2,2,2,2,2},
{0,1,1,2,2,3,3,3},
{0,1,2,3,3,4,4,4},
{0,1,2,3,3,4,4,4},
{0,1,2,3,3,4,4,4},
{0,1,2,3,4,5,5,5},
{0,1,2,3,4,5,6,6},
{0,1,2,3,4,5,6,7},
{0,1,3,4,5,6,7,8},
{0,1,3,5,6,7,8,9},
{0,1,3,5,6,8,9,10},
{0,1,3,5,6,8,10,11},
{0,1,3,6,7,9,11,12},
{0,1,3,6,7,9,12,13},
{0,2,4,7,8,10,13,14},
{0,2,4,7,8,10,13,15},
{0,2,4,7,9,11,14,16},
{0,2,5,8,10,12,15,17},
{0,2,5,8,10,13,16,18},
{0,3,6,9,11,14,17,19},
{0,3,6,9,12,15,18,20},
{0,3,6,9,12,15,18,21},
{0,4,7,10,13,16,19,22}
};

static uint32_t spac[32]={0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 6, 6, 6, 6, 7, 7, 7, 7};

static uint32_t spacc[32][3]={
{0, 0, 0 },
{0, 0, 0 },
{0, 0, 0 },
{0, 0, 0 },
{1, 2, 3 },
{1, 2, 3 },
{1, 2, 3 },
{1, 2, 3 },
{2, 4, 6 },
{2, 4, 6 },
{2, 4, 6 },
{2, 4, 6 },
{3, 6, 9 },
{3, 6, 9 },
{3, 6, 9 },
{3, 6, 9 },
{4, 8, 12 },
{4, 8, 12 },
{4, 8, 12 },
{4, 8, 12 },
{5, 10, 15 },
{5, 10, 15 },
{5, 10, 15 },
{5, 10, 15 },
{6, 12, 18 },
{6, 12, 18 },
{6, 12, 18 },
{6, 12, 18 },
{7, 14, 21 },
{7, 14, 21 },
{7, 14, 21 },
{7, 14, 21 }
  };


static uint32_t spacmask[32]={
0b11111111111111111111111111111011,
0b11111111111111111111111111111011,
0b11111111111111111111111111111011,
0b11111111111111111111111111111011,
0b11111111111111111111111111110000,
0b11111111111111111111111111110000,
0b11111111111111111111111111110000,
0b11111111111111111111111111110000,
0b11111111111111111111111110101010,
0b11111111111111111111111110101010,
0b11111111111111111111111110101010,
0b11111111111111111111111110101010,
0b11111111111111111111110110110110,
0b11111111111111111111110110110110,
0b11111111111111111111110110110110,
0b11111111111111111111110110110110,
0b11111111111111111110111011101110,
0b11111111111111111110111011101110,
0b11111111111111111110111011101110,
0b11111111111111111110111011101110,
0b11111111111111110111101111011110,
0b11111111111111110111101111011110,
0b11111111111111110111101111011110,
0b11111111111111110111101111011110,
0b11111111111110111110111110111110,
0b11111111111110111110111110111110,
0b11111111111110111110111110111110,
0b11111111111110111110111110111110,
0b11111111110111111011111101111110,
0b11111111110111111011111101111110,
0b11111111110111111011111101111110,
0b11111111110111111011111101111110
};

static int32_t lastspac[32][4]={
{0, 1, 2, 3 },
{0, 1, 2, 3 },
{0, 1, 2, 3 },
{0, 1, 2, 3 },
{0, 1, 2, 3 },
{0, 1, 2, 3 },
{0, 1, 2, 3 },
{0, 1, 2, 3 },
{1, 3, 5, 7 },
{1, 3, 5, 7 },
{1, 3, 5, 7 },
{1, 3, 5, 7 },
{2, 5, 8, 11 },
{2, 5, 8, 11 },
{2, 5, 8, 11 },
{2, 5, 8, 11 },
{3, 7, 11, 15 },
{3, 7, 11, 15 },
{3, 7, 11, 15 },
{3, 7, 11, 15 },
{4, 9, 14, 19 },
{4, 9, 14, 19 },
{4, 9, 14, 19 },
{4, 9, 14, 19 },
{5, 11, 17, 23 },
{5, 11, 17, 23 },
{5, 11, 17, 23 },
{5, 11, 17, 23 },
{6, 13, 20, 27 },
{6, 13, 20, 27 },
{6, 13, 20, 27 },
{6, 13, 20, 27 }
};

static uint32_t lastspacbac[32][4]={
{0, 0, 0, 0 },
{0, 0, 0, 0 },
{0, 0, 0, 0 },
{0, 0, 0, 0 },
{0, 0, 0, 0 },
{0, 0, 0, 0 },
{0, 0, 0, 0 },
{0, 0, 0, 0 },
{1, 2, 2, 4 },
{1, 2, 2, 4 },
{1, 2, 2, 4 },
{1, 2, 2, 4 },

{2, 4, 6, 8 },
{2, 4, 6, 8 },
{2, 4, 6, 8 },
{2, 4, 6, 8 },

{3, 6, 8, 12 },
{3, 6, 8, 12 },
{3, 6, 8, 12 },
{3, 6, 8, 12 },

{4, 8, 12, 16 },
{4, 8, 12, 16 },
{4, 8, 12, 16 },
{4, 8, 12, 16 },

{5, 10, 15, 20 },
{5, 10, 15, 20 },
{5, 10, 15, 20 },
{5, 10, 15, 20 },

{6, 12, 18, 24 },
{6, 12, 18, 24 },
{6, 12, 18, 24 },
{6, 12, 18, 24 }

};

static uint32_t others[4][3]={ // for triadex style - all but itself
{1,2,3},
{0,2,3},
{0,1,3},
{0,1,2}
};


//float mixer[12];

float mixer[1024] = {1.000000, 0.999023, 0.998047, 0.997070, 0.996094, 0.995117, 0.994141, 0.993164, 0.992188, 0.991211, 0.990234, 0.989258, 0.988281, 0.987305, 0.986328, 0.985352, 0.984375, 0.983398, 0.982422, 0.981445, 0.980469, 0.979492, 0.978516, 0.977539, 0.976562, 0.975586, 0.974609, 0.973633, 0.972656, 0.971680, 0.970703, 0.969727, 0.968750, 0.967773, 0.966797, 0.965820, 0.964844, 0.963867, 0.962891, 0.961914, 0.960938, 0.959961, 0.958984, 0.958008, 0.957031, 0.956055, 0.955078, 0.954102, 0.953125, 0.952148, 0.951172, 0.950195, 0.949219, 0.948242, 0.947266, 0.946289, 0.945312, 0.944336, 0.943359, 0.942383, 0.941406, 0.940430, 0.939453, 0.938477, 0.937500, 0.936523, 0.935547, 0.934570, 0.933594, 0.932617, 0.931641, 0.930664, 0.929688, 0.928711, 0.927734, 0.926758, 0.925781, 0.924805, 0.923828, 0.922852, 0.921875, 0.920898, 0.919922, 0.918945, 0.917969, 0.916992, 0.916016, 0.915039, 0.914062, 0.913086, 0.912109, 0.911133, 0.910156, 0.909180, 0.908203, 0.907227, 0.906250, 0.905273, 0.904297, 0.903320, 0.902344, 0.901367, 0.900391, 0.899414, 0.898438, 0.897461, 0.896484, 0.895508, 0.894531, 0.893555, 0.892578, 0.891602, 0.890625, 0.889648, 0.888672, 0.887695, 0.886719, 0.885742, 0.884766, 0.883789, 0.882812, 0.881836, 0.880859, 0.879883, 0.878906, 0.877930, 0.876953, 0.875977, 0.875000, 0.874023, 0.873047, 0.872070, 0.871094, 0.870117, 0.869141, 0.868164, 0.867188, 0.866211, 0.865234, 0.864258, 0.863281, 0.862305, 0.861328, 0.860352, 0.859375, 0.858398, 0.857422, 0.856445, 0.855469, 0.854492, 0.853516, 0.852539, 0.851562, 0.850586, 0.849609, 0.848633, 0.847656, 0.846680, 0.845703, 0.844727, 0.843750, 0.842773, 0.841797, 0.840820, 0.839844, 0.838867, 0.837891, 0.836914, 0.835938, 0.834961, 0.833984, 0.833008, 0.832031, 0.831055, 0.830078, 0.829102, 0.828125, 0.827148, 0.826172, 0.825195, 0.824219, 0.823242, 0.822266, 0.821289, 0.820312, 0.819336, 0.818359, 0.817383, 0.816406, 0.815430, 0.814453, 0.813477, 0.812500, 0.811523, 0.810547, 0.809570, 0.808594, 0.807617, 0.806641, 0.805664, 0.804688, 0.803711, 0.802734, 0.801758, 0.800781, 0.799805, 0.798828, 0.797852, 0.796875, 0.795898, 0.794922, 0.793945, 0.792969, 0.791992, 0.791016, 0.790039, 0.789062, 0.788086, 0.787109, 0.786133, 0.785156, 0.784180, 0.783203, 0.782227, 0.781250, 0.780273, 0.779297, 0.778320, 0.777344, 0.776367, 0.775391, 0.774414, 0.773438, 0.772461, 0.771484, 0.770508, 0.769531, 0.768555, 0.767578, 0.766602, 0.765625, 0.764648, 0.763672, 0.762695, 0.761719, 0.760742, 0.759766, 0.758789, 0.757812, 0.756836, 0.755859, 0.754883, 0.753906, 0.752930, 0.751953, 0.750977, 0.750000, 0.749023, 0.748047, 0.747070, 0.746094, 0.745117, 0.744141, 0.743164, 0.742188, 0.741211, 0.740234, 0.739258, 0.738281, 0.737305, 0.736328, 0.735352, 0.734375, 0.733398, 0.732422, 0.731445, 0.730469, 0.729492, 0.728516, 0.727539, 0.726562, 0.725586, 0.724609, 0.723633, 0.722656, 0.721680, 0.720703, 0.719727, 0.718750, 0.717773, 0.716797, 0.715820, 0.714844, 0.713867, 0.712891, 0.711914, 0.710938, 0.709961, 0.708984, 0.708008, 0.707031, 0.706055, 0.705078, 0.704102, 0.703125, 0.702148, 0.701172, 0.700195, 0.699219, 0.698242, 0.697266, 0.696289, 0.695312, 0.694336, 0.693359, 0.692383, 0.691406, 0.690430, 0.689453, 0.688477, 0.687500, 0.686523, 0.685547, 0.684570, 0.683594, 0.682617, 0.681641, 0.680664, 0.679688, 0.678711, 0.677734, 0.676758, 0.675781, 0.674805, 0.673828, 0.672852, 0.671875, 0.670898, 0.669922, 0.668945, 0.667969, 0.666992, 0.666016, 0.665039, 0.664062, 0.663086, 0.662109, 0.661133, 0.660156, 0.659180, 0.658203, 0.657227, 0.656250, 0.655273, 0.654297, 0.653320, 0.652344, 0.651367, 0.650391, 0.649414, 0.648438, 0.647461, 0.646484, 0.645508, 0.644531, 0.643555, 0.642578, 0.641602, 0.640625, 0.639648, 0.638672, 0.637695, 0.636719, 0.635742, 0.634766, 0.633789, 0.632812, 0.631836, 0.630859, 0.629883, 0.628906, 0.627930, 0.626953, 0.625977, 0.625000, 0.624023, 0.623047, 0.622070, 0.621094, 0.620117, 0.619141, 0.618164, 0.617188, 0.616211, 0.615234, 0.614258, 0.613281, 0.612305, 0.611328, 0.610352, 0.609375, 0.608398, 0.607422, 0.606445, 0.605469, 0.604492, 0.603516, 0.602539, 0.601562, 0.600586, 0.599609, 0.598633, 0.597656, 0.596680, 0.595703, 0.594727, 0.593750, 0.592773, 0.591797, 0.590820, 0.589844, 0.588867, 0.587891, 0.586914, 0.585938, 0.584961, 0.583984, 0.583008, 0.582031, 0.581055, 0.580078, 0.579102, 0.578125, 0.577148, 0.576172, 0.575195, 0.574219, 0.573242, 0.572266, 0.571289, 0.570312, 0.569336, 0.568359, 0.567383, 0.566406, 0.565430, 0.564453, 0.563477, 0.562500, 0.561523, 0.560547, 0.559570, 0.558594, 0.557617, 0.556641, 0.555664, 0.554688, 0.553711, 0.552734, 0.551758, 0.550781, 0.549805, 0.548828, 0.547852, 0.546875, 0.545898, 0.544922, 0.543945, 0.542969, 0.541992, 0.541016, 0.540039, 0.539062, 0.538086, 0.537109, 0.536133, 0.535156, 0.534180, 0.533203, 0.532227, 0.531250, 0.530273, 0.529297, 0.528320, 0.527344, 0.526367, 0.525391, 0.524414, 0.523438, 0.522461, 0.521484, 0.520508, 0.519531, 0.518555, 0.517578, 0.516602, 0.515625, 0.514648, 0.513672, 0.512695, 0.511719, 0.510742, 0.509766, 0.508789, 0.507812, 0.506836, 0.505859, 0.504883, 0.503906, 0.502930, 0.501953, 0.500977, 0.500000, 0.499023, 0.498047, 0.497070, 0.496094, 0.495117, 0.494141, 0.493164, 0.492188, 0.491211, 0.490234, 0.489258, 0.488281, 0.487305, 0.486328, 0.485352, 0.484375, 0.483398, 0.482422, 0.481445, 0.480469, 0.479492, 0.478516, 0.477539, 0.476562, 0.475586, 0.474609, 0.473633, 0.472656, 0.471680, 0.470703, 0.469727, 0.468750, 0.467773, 0.466797, 0.465820, 0.464844, 0.463867, 0.462891, 0.461914, 0.460938, 0.459961, 0.458984, 0.458008, 0.457031, 0.456055, 0.455078, 0.454102, 0.453125, 0.452148, 0.451172, 0.450195, 0.449219, 0.448242, 0.447266, 0.446289, 0.445312, 0.444336, 0.443359, 0.442383, 0.441406, 0.440430, 0.439453, 0.438477, 0.437500, 0.436523, 0.435547, 0.434570, 0.433594, 0.432617, 0.431641, 0.430664, 0.429688, 0.428711, 0.427734, 0.426758, 0.425781, 0.424805, 0.423828, 0.422852, 0.421875, 0.420898, 0.419922, 0.418945, 0.417969, 0.416992, 0.416016, 0.415039, 0.414062, 0.413086, 0.412109, 0.411133, 0.410156, 0.409180, 0.408203, 0.407227, 0.406250, 0.405273, 0.404297, 0.403320, 0.402344, 0.401367, 0.400391, 0.399414, 0.398438, 0.397461, 0.396484, 0.395508, 0.394531, 0.393555, 0.392578, 0.391602, 0.390625, 0.389648, 0.388672, 0.387695, 0.386719, 0.385742, 0.384766, 0.383789, 0.382812, 0.381836, 0.380859, 0.379883, 0.378906, 0.377930, 0.376953, 0.375977, 0.375000, 0.374023, 0.373047, 0.372070, 0.371094, 0.370117, 0.369141, 0.368164, 0.367188, 0.366211, 0.365234, 0.364258, 0.363281, 0.362305, 0.361328, 0.360352, 0.359375, 0.358398, 0.357422, 0.356445, 0.355469, 0.354492, 0.353516, 0.352539, 0.351562, 0.350586, 0.349609, 0.348633, 0.347656, 0.346680, 0.345703, 0.344727, 0.343750, 0.342773, 0.341797, 0.340820, 0.339844, 0.338867, 0.337891, 0.336914, 0.335938, 0.334961, 0.333984, 0.333008, 0.332031, 0.331055, 0.330078, 0.329102, 0.328125, 0.327148, 0.326172, 0.325195, 0.324219, 0.323242, 0.322266, 0.321289, 0.320312, 0.319336, 0.318359, 0.317383, 0.316406, 0.315430, 0.314453, 0.313477, 0.312500, 0.311523, 0.310547, 0.309570, 0.308594, 0.307617, 0.306641, 0.305664, 0.304688, 0.303711, 0.302734, 0.301758, 0.300781, 0.299805, 0.298828, 0.297852, 0.296875, 0.295898, 0.294922, 0.293945, 0.292969, 0.291992, 0.291016, 0.290039, 0.289062, 0.288086, 0.287109, 0.286133, 0.285156, 0.284180, 0.283203, 0.282227, 0.281250, 0.280273, 0.279297, 0.278320, 0.277344, 0.276367, 0.275391, 0.274414, 0.273438, 0.272461, 0.271484, 0.270508, 0.269531, 0.268555, 0.267578, 0.266602, 0.265625, 0.264648, 0.263672, 0.262695, 0.261719, 0.260742, 0.259766, 0.258789, 0.257812, 0.256836, 0.255859, 0.254883, 0.253906, 0.252930, 0.251953, 0.250977, 0.250000, 0.249023, 0.248047, 0.247070, 0.246094, 0.245117, 0.244141, 0.243164, 0.242188, 0.241211, 0.240234, 0.239258, 0.238281, 0.237305, 0.236328, 0.235352, 0.234375, 0.233398, 0.232422, 0.231445, 0.230469, 0.229492, 0.228516, 0.227539, 0.226562, 0.225586, 0.224609, 0.223633, 0.222656, 0.221680, 0.220703, 0.219727, 0.218750, 0.217773, 0.216797, 0.215820, 0.214844, 0.213867, 0.212891, 0.211914, 0.210938, 0.209961, 0.208984, 0.208008, 0.207031, 0.206055, 0.205078, 0.204102, 0.203125, 0.202148, 0.201172, 0.200195, 0.199219, 0.198242, 0.197266, 0.196289, 0.195312, 0.194336, 0.193359, 0.192383, 0.191406, 0.190430, 0.189453, 0.188477, 0.187500, 0.186523, 0.185547, 0.184570, 0.183594, 0.182617, 0.181641, 0.180664, 0.179688, 0.178711, 0.177734, 0.176758, 0.175781, 0.174805, 0.173828, 0.172852, 0.171875, 0.170898, 0.169922, 0.168945, 0.167969, 0.166992, 0.166016, 0.165039, 0.164062, 0.163086, 0.162109, 0.161133, 0.160156, 0.159180, 0.158203, 0.157227, 0.156250, 0.155273, 0.154297, 0.153320, 0.152344, 0.151367, 0.150391, 0.149414, 0.148438, 0.147461, 0.146484, 0.145508, 0.144531, 0.143555, 0.142578, 0.141602, 0.140625, 0.139648, 0.138672, 0.137695, 0.136719, 0.135742, 0.134766, 0.133789, 0.132812, 0.131836, 0.130859, 0.129883, 0.128906, 0.127930, 0.126953, 0.125977, 0.125000, 0.124023, 0.123047, 0.122070, 0.121094, 0.120117, 0.119141, 0.118164, 0.117188, 0.116211, 0.115234, 0.114258, 0.113281, 0.112305, 0.111328, 0.110352, 0.109375, 0.108398, 0.107422, 0.106445, 0.105469, 0.104492, 0.103516, 0.102539, 0.101562, 0.100586, 0.099609, 0.098633, 0.097656, 0.096680, 0.095703, 0.094727, 0.093750, 0.092773, 0.091797, 0.090820, 0.089844, 0.088867, 0.087891, 0.086914, 0.085938, 0.084961, 0.083984, 0.083008, 0.082031, 0.081055, 0.080078, 0.079102, 0.078125, 0.077148, 0.076172, 0.075195, 0.074219, 0.073242, 0.072266, 0.071289, 0.070312, 0.069336, 0.068359, 0.067383, 0.066406, 0.065430, 0.064453, 0.063477, 0.062500, 0.061523, 0.060547, 0.059570, 0.058594, 0.057617, 0.056641, 0.055664, 0.054688, 0.053711, 0.052734, 0.051758, 0.050781, 0.049805, 0.048828, 0.047852, 0.046875, 0.045898, 0.044922, 0.043945, 0.042969, 0.041992, 0.041016, 0.040039, 0.039062, 0.038086, 0.037109, 0.036133, 0.035156, 0.034180, 0.033203, 0.032227, 0.031250, 0.030273, 0.029297, 0.028320, 0.027344, 0.026367, 0.025391, 0.024414, 0.023438, 0.022461, 0.021484, 0.020508, 0.019531, 0.018555, 0.017578, 0.016602, 0.015625, 0.014648, 0.013672, 0.012695, 0.011719, 0.010742, 0.009766, 0.008789, 0.007812, 0.006836, 0.005859, 0.004883, 0.003906, 0.002930, 0.0f, 0.0f};

// this is from: /root/misc/log_gen.py:
// xx=numpy.logspace(0, 14, num=1024, endpoint=True, base=2.0) # num is now many we want 2^14 - 14 octaves
// zz=(float(xyz))/(1024*16) # reversed

// 16 octaves (was 15) // changed 24/1/2023
float logspeed[1024] = {0.000015, 0.000015, 0.000016, 0.000016, 0.000016, 0.000016, 0.000016, 0.000016, 0.000017, 0.000017, 0.000017, 0.000017, 0.000017, 0.000018, 0.000018, 0.000018, 0.000018, 0.000018, 0.000019, 0.000019, 0.000019, 0.000019, 0.000019, 0.000020, 0.000020, 0.000020, 0.000020, 0.000020, 0.000021, 0.000021, 0.000021, 0.000021, 0.000022, 0.000022, 0.000022, 0.000022, 0.000023, 0.000023, 0.000023, 0.000023, 0.000024, 0.000024, 0.000024, 0.000024, 0.000025, 0.000025, 0.000025, 0.000025, 0.000026, 0.000026, 0.000026, 0.000027, 0.000027, 0.000027, 0.000027, 0.000028, 0.000028, 0.000028, 0.000029, 0.000029, 0.000029, 0.000030, 0.000030, 0.000030, 0.000031, 0.000031, 0.000031, 0.000032, 0.000032, 0.000032, 0.000033, 0.000033, 0.000033, 0.000034, 0.000034, 0.000034, 0.000035, 0.000035, 0.000036, 0.000036, 0.000036, 0.000037, 0.000037, 0.000038, 0.000038, 0.000038, 0.000039, 0.000039, 0.000040, 0.000040, 0.000040, 0.000041, 0.000041, 0.000042, 0.000042, 0.000043, 0.000043, 0.000044, 0.000044, 0.000045, 0.000045, 0.000046, 0.000046, 0.000047, 0.000047, 0.000048, 0.000048, 0.000049, 0.000049, 0.000050, 0.000050, 0.000051, 0.000051, 0.000052, 0.000053, 0.000053, 0.000054, 0.000054, 0.000055, 0.000055, 0.000056, 0.000057, 0.000057, 0.000058, 0.000059, 0.000059, 0.000060, 0.000060, 0.000061, 0.000062, 0.000062, 0.000063, 0.000064, 0.000065, 0.000065, 0.000066, 0.000067, 0.000067, 0.000068, 0.000069, 0.000070, 0.000070, 0.000071, 0.000072, 0.000073, 0.000073, 0.000074, 0.000075, 0.000076, 0.000077, 0.000078, 0.000078, 0.000079, 0.000080, 0.000081, 0.000082, 0.000083, 0.000084, 0.000085, 0.000086, 0.000086, 0.000087, 0.000088, 0.000089, 0.000090, 0.000091, 0.000092, 0.000093, 0.000094, 0.000095, 0.000096, 0.000097, 0.000098, 0.000100, 0.000101, 0.000102, 0.000103, 0.000104, 0.000105, 0.000106, 0.000107, 0.000109, 0.000110, 0.000111, 0.000112, 0.000113, 0.000115, 0.000116, 0.000117, 0.000118, 0.000120, 0.000121, 0.000122, 0.000124, 0.000125, 0.000126, 0.000128, 0.000129, 0.000131, 0.000132, 0.000133, 0.000135, 0.000136, 0.000138, 0.000139, 0.000141, 0.000142, 0.000144, 0.000145, 0.000147, 0.000149, 0.000150, 0.000152, 0.000154, 0.000155, 0.000157, 0.000159, 0.000160, 0.000162, 0.000164, 0.000166, 0.000168, 0.000169, 0.000171, 0.000173, 0.000175, 0.000177, 0.000179, 0.000181, 0.000183, 0.000185, 0.000187, 0.000189, 0.000191, 0.000193, 0.000195, 0.000197, 0.000199, 0.000201, 0.000204, 0.000206, 0.000208, 0.000210, 0.000213, 0.000215, 0.000217, 0.000220, 0.000222, 0.000224, 0.000227, 0.000229, 0.000232, 0.000234, 0.000237, 0.000240, 0.000242, 0.000245, 0.000247, 0.000250, 0.000253, 0.000256, 0.000258, 0.000261, 0.000264, 0.000267, 0.000270, 0.000273, 0.000276, 0.000279, 0.000282, 0.000285, 0.000288, 0.000291, 0.000294, 0.000298, 0.000301, 0.000304, 0.000307, 0.000311, 0.000314, 0.000318, 0.000321, 0.000325, 0.000328, 0.000332, 0.000335, 0.000339, 0.000343, 0.000346, 0.000350, 0.000354, 0.000358, 0.000362, 0.000366, 0.000370, 0.000374, 0.000378, 0.000382, 0.000386, 0.000390, 0.000394, 0.000399, 0.000403, 0.000407, 0.000412, 0.000416, 0.000421, 0.000426, 0.000430, 0.000435, 0.000440, 0.000444, 0.000449, 0.000454, 0.000459, 0.000464, 0.000469, 0.000474, 0.000479, 0.000485, 0.000490, 0.000495, 0.000501, 0.000506, 0.000512, 0.000517, 0.000523, 0.000529, 0.000534, 0.000540, 0.000546, 0.000552, 0.000558, 0.000564, 0.000570, 0.000576, 0.000583, 0.000589, 0.000596, 0.000602, 0.000609, 0.000615, 0.000622, 0.000629, 0.000636, 0.000642, 0.000649, 0.000657, 0.000664, 0.000671, 0.000678, 0.000686, 0.000693, 0.000701, 0.000708, 0.000716, 0.000724, 0.000732, 0.000740, 0.000748, 0.000756, 0.000764, 0.000772, 0.000781, 0.000789, 0.000798, 0.000807, 0.000816, 0.000824, 0.000833, 0.000842, 0.000852, 0.000861, 0.000870, 0.000880, 0.000889, 0.000899, 0.000909, 0.000919, 0.000929, 0.000939, 0.000949, 0.000960, 0.000970, 0.000981, 0.000991, 0.001002, 0.001013, 0.001024, 0.001035, 0.001046, 0.001058, 0.001069, 0.001081, 0.001093, 0.001105, 0.001117, 0.001129, 0.001141, 0.001154, 0.001166, 0.001179, 0.001192, 0.001205, 0.001218, 0.001231, 0.001245, 0.001258, 0.001272, 0.001286, 0.001300, 0.001314, 0.001328, 0.001343, 0.001357, 0.001372, 0.001387, 0.001402, 0.001418, 0.001433, 0.001449, 0.001464, 0.001480, 0.001497, 0.001513, 0.001529, 0.001546, 0.001563, 0.001580, 0.001597, 0.001615, 0.001632, 0.001650, 0.001668, 0.001686, 0.001704, 0.001723, 0.001742, 0.001761, 0.001780, 0.001799, 0.001819, 0.001839, 0.001859, 0.001879, 0.001900, 0.001920, 0.001941, 0.001962, 0.001984, 0.002005, 0.002027, 0.002049, 0.002072, 0.002094, 0.002117, 0.002140, 0.002164, 0.002187, 0.002211, 0.002235, 0.002259, 0.002284, 0.002309, 0.002334, 0.002360, 0.002385, 0.002411, 0.002438, 0.002464, 0.002491, 0.002518, 0.002546, 0.002573, 0.002601, 0.002630, 0.002658, 0.002687, 0.002717, 0.002746, 0.002776, 0.002806, 0.002837, 0.002868, 0.002899, 0.002931, 0.002963, 0.002995, 0.003028, 0.003061, 0.003094, 0.003128, 0.003162, 0.003196, 0.003231, 0.003266, 0.003302, 0.003338, 0.003374, 0.003411, 0.003448, 0.003486, 0.003524, 0.003562, 0.003601, 0.003640, 0.003680, 0.003720, 0.003761, 0.003802, 0.003843, 0.003885, 0.003927, 0.003970, 0.004014, 0.004057, 0.004102, 0.004146, 0.004191, 0.004237, 0.004283, 0.004330, 0.004377, 0.004425, 0.004473, 0.004522, 0.004571, 0.004621, 0.004671, 0.004722, 0.004774, 0.004826, 0.004878, 0.004932, 0.004985, 0.005040, 0.005095, 0.005150, 0.005206, 0.005263, 0.005320, 0.005378, 0.005437, 0.005496, 0.005556, 0.005617, 0.005678, 0.005740, 0.005802, 0.005866, 0.005930, 0.005994, 0.006060, 0.006126, 0.006192, 0.006260, 0.006328, 0.006397, 0.006467, 0.006537, 0.006609, 0.006681, 0.006753, 0.006827, 0.006901, 0.006977, 0.007053, 0.007130, 0.007207, 0.007286, 0.007365, 0.007446, 0.007527, 0.007609, 0.007692, 0.007776, 0.007860, 0.007946, 0.008033, 0.008120, 0.008209, 0.008298, 0.008389, 0.008480, 0.008572, 0.008666, 0.008760, 0.008856, 0.008952, 0.009050, 0.009149, 0.009248, 0.009349, 0.009451, 0.009554, 0.009658, 0.009763, 0.009870, 0.009977, 0.010086, 0.010196, 0.010307, 0.010420, 0.010533, 0.010648, 0.010764, 0.010881, 0.011000, 0.011120, 0.011241, 0.011364, 0.011487, 0.011613, 0.011739, 0.011867, 0.011997, 0.012127, 0.012260, 0.012393, 0.012528, 0.012665, 0.012803, 0.012942, 0.013083, 0.013226, 0.013370, 0.013516, 0.013663, 0.013812, 0.013963, 0.014115, 0.014269, 0.014424, 0.014582, 0.014741, 0.014901, 0.015064, 0.015228, 0.015394, 0.015562, 0.015731, 0.015903, 0.016076, 0.016251, 0.016428, 0.016607, 0.016788, 0.016971, 0.017156, 0.017343, 0.017533, 0.017724, 0.017917, 0.018112, 0.018310, 0.018509, 0.018711, 0.018915, 0.019121, 0.019329, 0.019540, 0.019753, 0.019968, 0.020186, 0.020406, 0.020628, 0.020853, 0.021081, 0.021310, 0.021543, 0.021778, 0.022015, 0.022255, 0.022497, 0.022743, 0.022991, 0.023241, 0.023494, 0.023751, 0.024009, 0.024271, 0.024536, 0.024803, 0.025073, 0.025347, 0.025623, 0.025902, 0.026185, 0.026470, 0.026759, 0.027050, 0.027345, 0.027643, 0.027945, 0.028249, 0.028557, 0.028868, 0.029183, 0.029501, 0.029823, 0.030148, 0.030476, 0.030808, 0.031144, 0.031484, 0.031827, 0.032174, 0.032525, 0.032879, 0.033237, 0.033600, 0.033966, 0.034336, 0.034710, 0.035089, 0.035471, 0.035858, 0.036249, 0.036644, 0.037043, 0.037447, 0.037855, 0.038268, 0.038685, 0.039107, 0.039533, 0.039964, 0.040399, 0.040840, 0.041285, 0.041735, 0.042190, 0.042650, 0.043115, 0.043585, 0.044060, 0.044540, 0.045025, 0.045516, 0.046012, 0.046514, 0.047021, 0.047533, 0.048051, 0.048575, 0.049105, 0.049640, 0.050181, 0.050728, 0.051281, 0.051840, 0.052405, 0.052976, 0.053554, 0.054137, 0.054727, 0.055324, 0.055927, 0.056537, 0.057153, 0.057776, 0.058406, 0.059042, 0.059686, 0.060336, 0.060994, 0.061659, 0.062331, 0.063010, 0.063697, 0.064391, 0.065093, 0.065803, 0.066520, 0.067245, 0.067978, 0.068719, 0.069468, 0.070225, 0.070991, 0.071764, 0.072547, 0.073337, 0.074137, 0.074945, 0.075762, 0.076588, 0.077422, 0.078266, 0.079119, 0.079982, 0.080854, 0.081735, 0.082626, 0.083526, 0.084437, 0.085357, 0.086288, 0.087228, 0.088179, 0.089140, 0.090112, 0.091094, 0.092087, 0.093091, 0.094105, 0.095131, 0.096168, 0.097216, 0.098276, 0.099347, 0.100430, 0.101525, 0.102631, 0.103750, 0.104881, 0.106024, 0.107180, 0.108348, 0.109529, 0.110723, 0.111930, 0.113150, 0.114383, 0.115630, 0.116890, 0.118164, 0.119452, 0.120754, 0.122071, 0.123401, 0.124746, 0.126106, 0.127480, 0.128870, 0.130275, 0.131695, 0.133130, 0.134581, 0.136048, 0.137531, 0.139030, 0.140546, 0.142078, 0.143626, 0.145192, 0.146774, 0.148374, 0.149991, 0.151626, 0.153279, 0.154950, 0.156639, 0.158346, 0.160072, 0.161817, 0.163581, 0.165364, 0.167166, 0.168988, 0.170830, 0.172692, 0.174575, 0.176478, 0.178401, 0.180346, 0.182311, 0.184299, 0.186307, 0.188338, 0.190391, 0.192466, 0.194564, 0.196685, 0.198829, 0.200996, 0.203187, 0.205402, 0.207641, 0.209904, 0.212192, 0.214505, 0.216843, 0.219206, 0.221596, 0.224011, 0.226453, 0.228921, 0.231416, 0.233939, 0.236489, 0.239066, 0.241672, 0.244307, 0.246969, 0.249661, 0.252383, 0.255134, 0.257915, 0.260726, 0.263568, 0.266441, 0.269345, 0.272281, 0.275249, 0.278249, 0.281282, 0.284348, 0.287447, 0.290580, 0.293748, 0.296949, 0.300186, 0.303458, 0.306766, 0.310110, 0.313490, 0.316907, 0.320361, 0.323853, 0.327383, 0.330952, 0.334559, 0.338206, 0.341892, 0.345619, 0.349386, 0.353194, 0.357044, 0.360936, 0.364870, 0.368847, 0.372868, 0.376932, 0.381040, 0.385194, 0.389392, 0.393637, 0.397927, 0.402265, 0.406649, 0.411082, 0.415563, 0.420092, 0.424671, 0.429300, 0.433980, 0.438710, 0.443492, 0.448326, 0.453213, 0.458153, 0.463147, 0.468195, 0.473298, 0.478457, 0.483672, 0.488944, 0.494274, 0.499661, 0.505108, 0.510613, 0.516179, 0.521805, 0.527493, 0.533243, 0.539055, 0.544931, 0.550870, 0.556875, 0.562945, 0.569081, 0.575284, 0.581555, 0.587893, 0.594301, 0.600779, 0.607328, 0.613948, 0.620640, 0.627405, 0.634243, 0.641157, 0.648145, 0.655210, 0.662352, 0.669571, 0.676870, 0.684248, 0.691706, 0.699245, 0.706867, 0.714572, 0.722361, 0.730235, 0.738194, 0.746241, 0.754375, 0.762597, 0.770910, 0.779312, 0.787807, 0.796394, 0.805075, 0.813850, 0.822721, 0.831689, 0.840754, 0.849918, 0.859182, 0.868547, 0.878015, 0.887585, 0.897260, 0.907040, 0.916926, 0.926921, 0.937024, 0.947238, 0.957563, 0.968000, 0.978551, 0.989218, 1.000000};

static uint8_t countbts[4096]={0, 1, 1, 2, 1, 2, 2, 3, 1, 2, 2, 3, 2, 3, 3, 4, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 7, 8, 8, 9, 8, 9, 9, 10, 8, 9, 9, 10, 9, 10, 10, 11, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 7, 8, 8, 9, 8, 9, 9, 10, 8, 9, 9, 10, 9, 10, 10, 11, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 7, 8, 8, 9, 8, 9, 9, 10, 8, 9, 9, 10, 9, 10, 10, 11, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 7, 8, 8, 9, 8, 9, 9, 10, 8, 9, 9, 10, 9, 10, 10, 11, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 7, 8, 8, 9, 8, 9, 9, 10, 8, 9, 9, 10, 9, 10, 10, 11, 5, 6, 6, 7, 6, 7, 7, 8, 6, 7, 7, 8, 7, 8, 8, 9, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 7, 8, 8, 9, 8, 9, 9, 10, 8, 9, 9, 10, 9, 10, 10, 11, 6, 7, 7, 8, 7, 8, 8, 9, 7, 8, 8, 9, 8, 9, 9, 10, 7, 8, 8, 9, 8, 9, 9, 10, 8, 9, 9, 10, 9, 10, 10, 11, 7, 8, 8, 9, 8, 9, 9, 10, 8, 9, 9, 10, 9, 10, 10, 11, 8, 9, 9, 10, 9, 10, 10, 11, 9, 10, 10, 11, 10, 11, 11, 12};

float logspeed18[1024] = {0.000004, 0.000004, 0.000004, 0.000004, 0.000004, 0.000004, 0.000004, 0.000004, 0.000004, 0.000004, 0.000004, 0.000004, 0.000004, 0.000004, 0.000005, 0.000005, 0.000005, 0.000005, 0.000005, 0.000005, 0.000005, 0.000005, 0.000005, 0.000005, 0.000005, 0.000005, 0.000005, 0.000005, 0.000005, 0.000005, 0.000005, 0.000006, 0.000006, 0.000006, 0.000006, 0.000006, 0.000006, 0.000006, 0.000006, 0.000006, 0.000006, 0.000006, 0.000006, 0.000006, 0.000007, 0.000007, 0.000007, 0.000007, 0.000007, 0.000007, 0.000007, 0.000007, 0.000007, 0.000007, 0.000007, 0.000007, 0.000008, 0.000008, 0.000008, 0.000008, 0.000008, 0.000008, 0.000008, 0.000008, 0.000008, 0.000008, 0.000009, 0.000009, 0.000009, 0.000009, 0.000009, 0.000009, 0.000009, 0.000009, 0.000009, 0.000010, 0.000010, 0.000010, 0.000010, 0.000010, 0.000010, 0.000010, 0.000010, 0.000010, 0.000011, 0.000011, 0.000011, 0.000011, 0.000011, 0.000011, 0.000011, 0.000012, 0.000012, 0.000012, 0.000012, 0.000012, 0.000012, 0.000012, 0.000013, 0.000013, 0.000013, 0.000013, 0.000013, 0.000013, 0.000014, 0.000014, 0.000014, 0.000014, 0.000014, 0.000014, 0.000015, 0.000015, 0.000015, 0.000015, 0.000015, 0.000016, 0.000016, 0.000016, 0.000016, 0.000016, 0.000016, 0.000017, 0.000017, 0.000017, 0.000017, 0.000018, 0.000018, 0.000018, 0.000018, 0.000018, 0.000019, 0.000019, 0.000019, 0.000019, 0.000020, 0.000020, 0.000020, 0.000020, 0.000021, 0.000021, 0.000021, 0.000021, 0.000022, 0.000022, 0.000022, 0.000022, 0.000023, 0.000023, 0.000023, 0.000023, 0.000024, 0.000024, 0.000024, 0.000025, 0.000025, 0.000025, 0.000026, 0.000026, 0.000026, 0.000027, 0.000027, 0.000027, 0.000028, 0.000028, 0.000028, 0.000029, 0.000029, 0.000029, 0.000030, 0.000030, 0.000030, 0.000031, 0.000031, 0.000031, 0.000032, 0.000032, 0.000033, 0.000033, 0.000033, 0.000034, 0.000034, 0.000035, 0.000035, 0.000036, 0.000036, 0.000036, 0.000037, 0.000037, 0.000038, 0.000038, 0.000039, 0.000039, 0.000040, 0.000040, 0.000041, 0.000041, 0.000042, 0.000042, 0.000043, 0.000043, 0.000044, 0.000044, 0.000045, 0.000045, 0.000046, 0.000046, 0.000047, 0.000048, 0.000048, 0.000049, 0.000049, 0.000050, 0.000051, 0.000051, 0.000052, 0.000053, 0.000053, 0.000054, 0.000054, 0.000055, 0.000056, 0.000056, 0.000057, 0.000058, 0.000059, 0.000059, 0.000060, 0.000061, 0.000062, 0.000062, 0.000063, 0.000064, 0.000065, 0.000065, 0.000066, 0.000067, 0.000068, 0.000069, 0.000070, 0.000070, 0.000071, 0.000072, 0.000073, 0.000074, 0.000075, 0.000076, 0.000077, 0.000078, 0.000079, 0.000079, 0.000080, 0.000081, 0.000082, 0.000083, 0.000084, 0.000086, 0.000087, 0.000088, 0.000089, 0.000090, 0.000091, 0.000092, 0.000093, 0.000094, 0.000095, 0.000097, 0.000098, 0.000099, 0.000100, 0.000101, 0.000103, 0.000104, 0.000105, 0.000107, 0.000108, 0.000109, 0.000110, 0.000112, 0.000113, 0.000115, 0.000116, 0.000117, 0.000119, 0.000120, 0.000122, 0.000123, 0.000125, 0.000126, 0.000128, 0.000129, 0.000131, 0.000133, 0.000134, 0.000136, 0.000138, 0.000139, 0.000141, 0.000143, 0.000145, 0.000146, 0.000148, 0.000150, 0.000152, 0.000154, 0.000155, 0.000157, 0.000159, 0.000161, 0.000163, 0.000165, 0.000167, 0.000169, 0.000171, 0.000174, 0.000176, 0.000178, 0.000180, 0.000182, 0.000184, 0.000187, 0.000189, 0.000191, 0.000194, 0.000196, 0.000198, 0.000201, 0.000203, 0.000206, 0.000208, 0.000211, 0.000213, 0.000216, 0.000219, 0.000221, 0.000224, 0.000227, 0.000230, 0.000233, 0.000235, 0.000238, 0.000241, 0.000244, 0.000247, 0.000250, 0.000253, 0.000256, 0.000259, 0.000263, 0.000266, 0.000269, 0.000272, 0.000276, 0.000279, 0.000283, 0.000286, 0.000290, 0.000293, 0.000297, 0.000300, 0.000304, 0.000308, 0.000312, 0.000315, 0.000319, 0.000323, 0.000327, 0.000331, 0.000335, 0.000339, 0.000344, 0.000348, 0.000352, 0.000356, 0.000361, 0.000365, 0.000370, 0.000374, 0.000379, 0.000383, 0.000388, 0.000393, 0.000398, 0.000403, 0.000407, 0.000412, 0.000418, 0.000423, 0.000428, 0.000433, 0.000438, 0.000444, 0.000449, 0.000455, 0.000460, 0.000466, 0.000472, 0.000477, 0.000483, 0.000489, 0.000495, 0.000501, 0.000508, 0.000514, 0.000520, 0.000526, 0.000533, 0.000539, 0.000546, 0.000553, 0.000560, 0.000566, 0.000573, 0.000580, 0.000587, 0.000595, 0.000602, 0.000609, 0.000617, 0.000624, 0.000632, 0.000640, 0.000648, 0.000656, 0.000664, 0.000672, 0.000680, 0.000688, 0.000697, 0.000705, 0.000714, 0.000723, 0.000732, 0.000741, 0.000750, 0.000759, 0.000768, 0.000778, 0.000787, 0.000797, 0.000807, 0.000817, 0.000827, 0.000837, 0.000847, 0.000857, 0.000868, 0.000879, 0.000889, 0.000900, 0.000911, 0.000923, 0.000934, 0.000945, 0.000957, 0.000969, 0.000981, 0.000993, 0.001005, 0.001017, 0.001030, 0.001042, 0.001055, 0.001068, 0.001081, 0.001094, 0.001108, 0.001121, 0.001135, 0.001149, 0.001163, 0.001177, 0.001192, 0.001206, 0.001221, 0.001236, 0.001251, 0.001267, 0.001282, 0.001298, 0.001314, 0.001330, 0.001346, 0.001363, 0.001380, 0.001397, 0.001414, 0.001431, 0.001449, 0.001466, 0.001484, 0.001503, 0.001521, 0.001540, 0.001559, 0.001578, 0.001597, 0.001617, 0.001637, 0.001657, 0.001677, 0.001698, 0.001718, 0.001739, 0.001761, 0.001782, 0.001804, 0.001826, 0.001849, 0.001872, 0.001894, 0.001918, 0.001941, 0.001965, 0.001989, 0.002014, 0.002038, 0.002063, 0.002089, 0.002114, 0.002140, 0.002166, 0.002193, 0.002220, 0.002247, 0.002275, 0.002303, 0.002331, 0.002360, 0.002389, 0.002418, 0.002447, 0.002478, 0.002508, 0.002539, 0.002570, 0.002601, 0.002633, 0.002666, 0.002698, 0.002731, 0.002765, 0.002799, 0.002833, 0.002868, 0.002903, 0.002939, 0.002975, 0.003011, 0.003048, 0.003086, 0.003124, 0.003162, 0.003201, 0.003240, 0.003280, 0.003320, 0.003361, 0.003402, 0.003444, 0.003486, 0.003529, 0.003572, 0.003616, 0.003660, 0.003705, 0.003751, 0.003797, 0.003843, 0.003890, 0.003938, 0.003986, 0.004035, 0.004085, 0.004135, 0.004186, 0.004237, 0.004289, 0.004342, 0.004395, 0.004449, 0.004504, 0.004559, 0.004615, 0.004671, 0.004729, 0.004787, 0.004845, 0.004905, 0.004965, 0.005026, 0.005088, 0.005150, 0.005213, 0.005277, 0.005342, 0.005408, 0.005474, 0.005541, 0.005609, 0.005678, 0.005748, 0.005818, 0.005890, 0.005962, 0.006035, 0.006109, 0.006184, 0.006260, 0.006337, 0.006414, 0.006493, 0.006573, 0.006653, 0.006735, 0.006818, 0.006901, 0.006986, 0.007072, 0.007159, 0.007246, 0.007335, 0.007425, 0.007517, 0.007609, 0.007702, 0.007797, 0.007892, 0.007989, 0.008087, 0.008186, 0.008287, 0.008389, 0.008491, 0.008596, 0.008701, 0.008808, 0.008916, 0.009025, 0.009136, 0.009248, 0.009362, 0.009477, 0.009593, 0.009711, 0.009830, 0.009950, 0.010073, 0.010196, 0.010321, 0.010448, 0.010576, 0.010706, 0.010837, 0.010970, 0.011105, 0.011241, 0.011379, 0.011519, 0.011660, 0.011803, 0.011948, 0.012095, 0.012243, 0.012393, 0.012545, 0.012699, 0.012855, 0.013013, 0.013172, 0.013334, 0.013498, 0.013663, 0.013831, 0.014001, 0.014172, 0.014346, 0.014522, 0.014701, 0.014881, 0.015064, 0.015248, 0.015436, 0.015625, 0.015817, 0.016011, 0.016207, 0.016406, 0.016607, 0.016811, 0.017018, 0.017226, 0.017438, 0.017652, 0.017868, 0.018088, 0.018310, 0.018534, 0.018762, 0.018992, 0.019225, 0.019461, 0.019700, 0.019941, 0.020186, 0.020434, 0.020684, 0.020938, 0.021195, 0.021455, 0.021719, 0.021985, 0.022255, 0.022528, 0.022804, 0.023084, 0.023367, 0.023654, 0.023944, 0.024238, 0.024536, 0.024837, 0.025142, 0.025450, 0.025762, 0.026078, 0.026398, 0.026722, 0.027050, 0.027382, 0.027718, 0.028058, 0.028403, 0.028751, 0.029104, 0.029461, 0.029823, 0.030189, 0.030559, 0.030934, 0.031314, 0.031698, 0.032087, 0.032481, 0.032879, 0.033283, 0.033691, 0.034104, 0.034523, 0.034946, 0.035375, 0.035809, 0.036249, 0.036694, 0.037144, 0.037600, 0.038061, 0.038528, 0.039001, 0.039479, 0.039964, 0.040454, 0.040951, 0.041453, 0.041962, 0.042477, 0.042998, 0.043526, 0.044060, 0.044600, 0.045148, 0.045702, 0.046262, 0.046830, 0.047405, 0.047986, 0.048575, 0.049171, 0.049775, 0.050385, 0.051004, 0.051630, 0.052263, 0.052904, 0.053554, 0.054211, 0.054876, 0.055549, 0.056231, 0.056921, 0.057619, 0.058326, 0.059042, 0.059767, 0.060500, 0.061242, 0.061994, 0.062755, 0.063525, 0.064304, 0.065093, 0.065892, 0.066701, 0.067519, 0.068347, 0.069186, 0.070035, 0.070895, 0.071764, 0.072645, 0.073536, 0.074439, 0.075352, 0.076277, 0.077213, 0.078160, 0.079119, 0.080090, 0.081073, 0.082068, 0.083075, 0.084094, 0.085126, 0.086171, 0.087228, 0.088299, 0.089382, 0.090479, 0.091589, 0.092713, 0.093851, 0.095002, 0.096168, 0.097348, 0.098543, 0.099752, 0.100976, 0.102215, 0.103469, 0.104739, 0.106024, 0.107325, 0.108642, 0.109975, 0.111325, 0.112691, 0.114073, 0.115473, 0.116890, 0.118325, 0.119776, 0.121246, 0.122734, 0.124240, 0.125765, 0.127308, 0.128870, 0.130451, 0.132052, 0.133672, 0.135313, 0.136973, 0.138654, 0.140355, 0.142078, 0.143821, 0.145586, 0.147372, 0.149181, 0.151011, 0.152864, 0.154740, 0.156639, 0.158561, 0.160507, 0.162476, 0.164470, 0.166488, 0.168531, 0.170599, 0.172692, 0.174811, 0.176956, 0.179128, 0.181326, 0.183551, 0.185803, 0.188083, 0.190391, 0.192727, 0.195092, 0.197486, 0.199910, 0.202363, 0.204846, 0.207359, 0.209904, 0.212480, 0.215087, 0.217726, 0.220398, 0.223102, 0.225840, 0.228611, 0.231416, 0.234256, 0.237131, 0.240040, 0.242986, 0.245967, 0.248986, 0.252041, 0.255134, 0.258264, 0.261434, 0.264642, 0.267889, 0.271176, 0.274504, 0.277872, 0.281282, 0.284733, 0.288227, 0.291764, 0.295344, 0.298968, 0.302637, 0.306351, 0.310110, 0.313915, 0.317767, 0.321666, 0.325613, 0.329609, 0.333653, 0.337748, 0.341892, 0.346087, 0.350334, 0.354633, 0.358985, 0.363390, 0.367849, 0.372363, 0.376932, 0.381557, 0.386239, 0.390979, 0.395776, 0.400633, 0.405549, 0.410525, 0.415563, 0.420662, 0.425824, 0.431049, 0.436338, 0.441693, 0.447112, 0.452599, 0.458153, 0.463775, 0.469465, 0.475226, 0.481058, 0.486961, 0.492936, 0.498985, 0.505108, 0.511306, 0.517580, 0.523931, 0.530360, 0.536868, 0.543456, 0.550124, 0.556875, 0.563708, 0.570625, 0.577627, 0.584715, 0.591890, 0.599153, 0.606505, 0.613948, 0.621481, 0.629107, 0.636827, 0.644641, 0.652552, 0.660559, 0.668665, 0.676870, 0.685175, 0.693583, 0.702094, 0.710709, 0.719430, 0.728258, 0.737195, 0.746241, 0.755398, 0.764667, 0.774050, 0.783548, 0.793163, 0.802896, 0.812748, 0.822721, 0.832816, 0.843036, 0.853380, 0.863852, 0.874452, 0.885183, 0.896044, 0.907040, 0.918170, 0.929436, 0.940841, 0.952386, 0.964073, 0.975903, 0.987878, 1.000000};
