void SRRLLswop(uint8_t w){ // swop in or logop SR - cv and cvl ***

    BINROUTE_;
    if (gate[w].trigger) {
      lin=127-(CV[w]>>5); //7= 2 bits for whichone and start which can be 5
      lout=31-(CVL[w]>>7); // 5 bits for length
      // length of incoming - lout
      tmp=gate[lin&0x03].shift_>>(31-lout);
      gate[w].shift_^=(tmp<<(31-(lin>>2)));
      //gate[w].shift_=gate[oppose[w]].shift_; // sieve is previous one but could be opposite one
    }
    PULSIN_XOR;
    BITN_AND_OUTV_;

void SRR0(uint8_t w){

    BINROUTE_;
    PULSIN_XOR;
    BITN_AND_OUTV_;

void SRR0nog(uint8_t w){

    BINROUTENOG_;
    PULSIN_XOR;
    BITN_AND_OUTV_;

void SRRnada(uint8_t w){  // no route in. nada

    bitn=0;
    PULSIN_XOR;
    if (!strobey[w][mode[w]]) bitn=bitn|gate[w].trigger;
    BITN_AND_OUTV_;

void SRR1(uint8_t w){ // route and cycle

    BINROUTEANDCYCLE_;
    PULSIN_XOR;
    BITN_AND_OUTV_;

void SRRmod(uint8_t w){ // modulo route in

    //    BINROUTE_;
    // we modulo our SR with routed ins
  tmp=binroute[count][w];
  for (x=0;x<4;x++){
  if (tmp&0x01){
  bitrr = (gate[x].Gshift_[w]>>SRlength[x]) & 0x01;
  gate[x].Gshift_[w]=(gate[x].Gshift_[w]<<1)+bitrr;
  bitn^=bitrr;    
  gate[w].shift_=gate[w].shift_%gate[x].Gshift_[w];
  }
  tmp=tmp>>1;
  }

    PULSIN_XOR;
    if (!strobey[w][mode[w]]) bitn=bitn|gate[w].trigger;
    BITN_AND_OUTV_;

void SRRosc0(uint8_t w){ // basic route in with oscillator

    bitn=ADC_(w,SRlength[w],30,gate[w].trigger,dacfrom[daccount][w],0, &gate[w].shift_); // oscillator
    //    BINROUTE_; //
    PULSIN_XOR;
    if (!strobey[w][mode[w]]) bitn=bitn|gate[w].trigger;
    BITN_AND_OUTV_;

void SRRaccelghosts0(uint8_t w){ // route in // exp mode to accelerate/bump on all ghosts except own - could also select which ones for intmode

    // bump up ALL except own gshifts or can be others missing eg. except for 0
    for (x=0;x<4;x++){     
      bitrr = (gate[x].Gshift_[0]>>SRlength[x]) & 0x01;  // gshifts FOR 0 including our own
      gate[x].Gshift_[0]=(gate[x].Gshift_[0]<<1)+bitrr;
    }
    for (x=0;x<4;x++){     
      bitrr = (gate[x].Gshift_[1]>>SRlength[x]) & 0x01;  
      gate[x].Gshift_[1]=(gate[x].Gshift_[1]<<1)+bitrr;
    }
    for (x=0;x<4;x++){     
      bitrr = (gate[x].Gshift_[2]>>SRlength[x]) & 0x01;  
      gate[x].Gshift_[2]=(gate[x].Gshift_[2]<<1)+bitrr;
    }
        
    BINROUTE_;
    PULSIN_XOR;
    BITN_AND_OUTV_;

void SRRstroberoute(uint8_t w){ // kill all routes

    BINROUTE_; // we still keep our route in?
    PULSIN_XOR;
    BITN_AND_OUTV_;

void SRRglobalbump0(uint8_t w){ // bump dacroute and binroute  // what of spdcount

    BINROUTE_;
    PULSIN_XOR;
    BITN_AND_OUTV_;

void SRRglobaldac0(uint8_t w){ // dac as global route table

    BINROUTE_;
    PULSIN_XOR;
    BITN_AND_OUTV_;

void SRRbumproute0(uint8_t w){ // trigger bumps up our local route - add one to this (what value) - gate[0].route

  // no strobe bit in
  //  BINROUTE_; // new routing in here.
  if (gate[w].trigger) gate[w].route++;
  if (gate[w].route>15) gate[w].route=0;
  tmp=myroute[w][gate[w].route];
  for (x=0;x<4;x++){
  if (tmp&0x01){
  bitrr = (gate[x].Gshift_[w]>>SRlength[x]) & 0x01;
  gate[x].Gshift_[w]=(gate[x].Gshift_[w]<<1)+bitrr;
  bitn^=bitrr;
  }
  tmp=tmp>>1;
    }
  PULSIN_XOR;
  BITN_AND_OUTV_; // with pulses

void SRRDACroute0(uint8_t w){

  //  BINROUTE_; // new routing in here.
  tmp=gate[dacfrom[daccount][w]].dac&15;
  for (x=0;x<4;x++){
  if (tmp&0x01){
  bitrr = (gate[x].Gshift_[w]>>SRlength[x]) & 0x01;
  gate[x].Gshift_[w]=(gate[x].Gshift_[w]<<1)+bitrr;
  bitn^=bitrr;
  }
  tmp=tmp>>1;
    }
  PULSIN_XOR;
  if (!strobey[w][mode[w]]) bitn=bitn|gate[w].trigger;
  BITN_AND_OUTV_; // with pulses

void SRRSRroute0(uint8_t w){

  if (!strobey[w][mode[w]]) bitn=bitn|gate[w].trigger;
  //  BINROUTE_; // new routing in here.
  tmp=gate[dacfrom[daccount][w]].Gshift_[w]&15;
  for (x=0;x<4;x++){
  if (tmp&0x01){
  bitrr = (gate[x].Gshift_[w]>>SRlength[x]) & 0x01;
  gate[x].Gshift_[w]=(gate[x].Gshift_[w]<<1)+bitrr;
  bitn^=bitrr;
  }
  tmp=tmp>>1;
    }
  PULSIN_XOR;
  if (!strobey[w][mode[w]]) bitn=bitn|gate[w].trigger;
  BITN_AND_OUTV_; // with pulses

void SRR32(uint8_t w){ // multiple bits in as case 19 in draftdec

    gate[w].shift_&=spacmask[SRlength[w]]; //cleared
    if (SRlength[inroute[count][w]]>=SRlength[w]){
    gate[w].shift_ |=(((gate[inroute[count][w]].shift_&(1<<lastspac[SRlength[inroute[count][w]]][0])) >>(lastspac[SRlength[inroute[count][w]]][0]))+ \
		      ((gate[inroute[count][w]].shift_&(1<<lastspac[SRlength[inroute[count][w]]][1]))          >> ((lastspac[SRlength[inroute[count][w]]][1]) - spacc[SRlength[w]][0]))  + \
		      ((gate[inroute[count][w]].shift_&(1<<lastspac[SRlength[inroute[count][w]]][2]))         >>((lastspac[SRlength[inroute[count][w]]][2]) - spacc[SRlength[w]][1]))  + \
		      ((gate[inroute[count][w]].shift_&(1<<lastspac[SRlength[inroute[count][w]]][3]))         >>((lastspac[SRlength[inroute[count][w]]][3]) - spacc[SRlength[w]][2]))); 
  }
  else // shift up <<
    {
      gate[w].shift_ |=(((gate[inroute[count][w]].shift_&(1<<lastspac[SRlength[inroute[count][w]]][0]))>>(lastspac[SRlength[inroute[count][w]]][0])) + \
			((gate[inroute[count][w]].shift_&(1<<lastspac[SRlength[inroute[count][w]]][1]))<< ((spacc[SRlength[w]][0]) - lastspac[SRlength[inroute[count][w]]][1]))  + \
			((gate[inroute[count][w]].shift_&(1<<lastspac[SRlength[inroute[count][w]]][2]))<< ((spacc[SRlength[w]][1]) - lastspac[SRlength[inroute[count][w]]][2]))  + \
			((gate[inroute[count][w]].shift_&(1<<lastspac[SRlength[inroute[count][w]]][3]))<< ((spacc[SRlength[w]][2]) - lastspac[SRlength[inroute[count][w]]][3])));
    }
    bitn=gate[w].shift_&1; // fixed this 29/12/2021
    if (!strobey[w][mode[w]]) bitn=bitn|gate[w].trigger;
    PULSIN_XOR;
    BITN_AND_OUTV_;

void SRRBITlengthdac(uint8_t w){


    BINROUTE_;
    PULSIN_XOR;
    BITN_AND_OUTVDACT_; // for pulse out and local dactype in tmp

void SRRLBITlengthdac(uint8_t w){ // detach length and just have dactype


    BINROUTE_;
    PULSIN_XOR;
    BITN_AND_OUTVDACT_; // for pulse out and local dactype in tmp

void SRRdacoffset0(uint8_t w){

    BINROUTE_;
    PULSIN_XOR;
    BITN_AND_OUTV_;

void SRRdacadditself0(uint8_t w){ // tested//trial itself as DAC - can also be other variants TODO

    BINROUTE_;
    PULSIN_XOR;
    BITN_AND_OUTV_;

void SRRdacghostitself0(uint8_t w){ // own ghost from next 1 - could also select incoming ghost which would be: gate[w].Gshift_[0]//gate[x].Gshift_[w]

  CVOPENDAC;
  if(gate[w].last_time<gate[w].int_time)      {
    GSHIFT_;
    BINROUTE_;
    PULSIN_XOR;
    BITN_AND_OUTV_;

void SRRdacseladd0(uint8_t w){

    BINROUTE_;
    PULSIN_XOR;
    BITN_AND_OUTV_;

void SRRdacadd0(uint8_t w){

    BINROUTE_;
    PULSIN_XOR;
    BITN_AND_OUTV_;

void SRRdacmod(uint8_t w){

    BINROUTE_;
    BITN_AND_OUTV_;

void SRRB0(uint8_t w){// with oscillator

    bitn=ADC_(w,SRlength[w],30,gate[w].trigger,dacfrom[daccount][w],0, &gate[w].shift_); // oscillator
    //    BINROUTE_; // no route in now
    if (!strobey[w][mode[w]]) bitn=bitn|gate[w].trigger;
    PULSIN_XOR;
    BITN_AND_OUTV_;

void SRRrung0(uint8_t w){// with oscillator

    bitn=ADC_(w,SRlength[w],30,gate[w].trigger,dacfrom[daccount][w],0, &gate[w].shift_); // oscillator
    BITN_AND_OUTV_;

void SRRrung1(uint8_t w){// with oscillator - other minus - but is same as above

    bitn=ADC_(w,SRlength[w],30,gate[w].trigger,dacfrom[daccount][w],0, &gate[w].shift_); // oscillator
    BITN_AND_OUTV_;

void SRRrung2(uint8_t w){// with oscillator - mod

    bitn=ADC_(1,SRlength[w],30,gate[w].trigger,dacfrom[daccount][1],0, &gate[w].shift_); // oscillator
    //    BINROUTE_;
    PULSIN_XOR;
    BITN_AND_OUTV_;

void SRRrung3(uint8_t w){// with oscillator - add

    bitn=ADC_(w,SRlength[w],30,gate[w].trigger,dacfrom[daccount][w],0, &gate[w].shift_); // oscillator
    //    BINROUTE_;
    PULSIN_XOR;
    BITN_AND_OUTV_;

void SRRLrung0(uint8_t w){// DETACHED> with oscillator

    tmp=tmp>>2;
    bitn=ADC_(w,SRlength[w],oscmode[tmp],gate[w].trigger,dacfrom[daccount][w],0, &gate[w].shift_); // oscillator
    //    BINROUTE_;
    PULSIN_XOR;
    BITN_AND_OUTV_;

void SRRdacminus0(uint8_t w){

    BINROUTE_;
    PULSIN_XOR;
    BITN_AND_OUTV_;

void SRRdacspeedminus0(uint8_t w){

    BINROUTE_;
    PULSIN_XOR;
    BITN_AND_OUTV_;

void SRRdacmod0(uint8_t w){

    BINROUTE_;
    PULSIN_XOR;
    BITN_AND_OUTV_;

